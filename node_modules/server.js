const http = require('http');
const fs = require('fs');
const url = require('url');
const path = require('path');

const server = http.createServer((req, res) => {
    const parsedUrl = url.parse(req.url, true);

    if (parsedUrl.pathname === '/fetch') {
        const fromValue = parsedUrl.query.from;
        const toValue = parsedUrl.query.to;
        const fromLink = 'https://id.m.wikipedia.org/wiki/' + encodeURIComponent(fromValue);
        const toLink = 'https://id.m.wikipedia.org/wiki/' + encodeURIComponent(toValue);

        Promise.all([tryFetch(fromLink), tryFetch(toLink)])
            .then(([fromData, toData]) => {
                const data = { from: fromData, to: toData };
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify(data));
            })
            .catch(error => {
                console.error('Error:', error);
                res.writeHead(500, { 'Content-Type': 'text/plain' });
                res.end('Internal Server Error');
            });
    } else if (parsedUrl.pathname === '/style.css') {
        // Serve CSS file
        fs.readFile('style.css', (err, data) => {
            if (err) {
                res.writeHead(404, { 'Content-Type': 'text/plain' });
                res.end('404 Not Found');
            } else {
                res.writeHead(200, { 'Content-Type': 'text/css' });
                res.end(data);
            }
        });
    } else if (parsedUrl.pathname === '/script.js') {
        // Serve JavaScript file
        fs.readFile('script.js', (err, data) => {
            if (err) {
                res.writeHead(404, { 'Content-Type': 'text/plain' });
                res.end('404 Not Found');
            } else {
                res.writeHead(200, { 'Content-Type': 'application/javascript' });
                res.end(data);
            }
        });
    } else {
        // Serve HTML file for any other requests
        fs.readFile('index.html', (err, data) => {
            if (err) {
                res.writeHead(404, { 'Content-Type': 'text/html' });
                res.end('404 Not Found');
            } else {
                res.writeHead(200, { 'Content-Type': 'text/html' });
                res.end(data);
            }
        });
    }
});

server.listen(3000, () => {
    console.log("http://127.0.0.1:3000");
});

console.log("Server running...");

function clickFunction() {
    // const fromValue = document.getElementById("from-field").value;
    // const toValue = document.getElementById("to-field").value;
    // const fromLink = 'https://id.m.wikipedia.org/wiki/' + encodeURIComponent(fromValue);
    // const toLink = 'https://id.m.wikipedia.org/wiki/' + encodeURIComponent(toValue);
  
    writeToJSON()
    console.log("ok");
  }
  
  function updateFile() {
    const fileInput = document.getElementById('from-field');
    const formData = new FormData();
    formData.append('file', fileInput.files[0]);
  
    fetch('/update', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        document.getElementById('message').textContent = data.message;
    })
    .catch(error => {
        console.error('Error:', error);
    });
  }
  
  function writeToJSON(){
  
    const newLinkData = {
      "from": "aaa",
      "to": "bbbb"
    };
  
    const newDataJSON = JSON.stringify(newLinkData, null, 2);
    const filePath = 'link.json';
  
    fs.writeFile(filePath, newDataJSON, 'utf8', (err) => {
      if (err) {
        console.error('Error writing to file:', err);
      } else {
        console.log('File "link.json" has been updated successfully.');
      }
    });
  }
  
  
function tryFetch(link) {
return fetch(link)
    .then(response => {
    if (!response.ok) {
        throw new Error(`Error fetching data (Status: ${response.status})`);
    }
    return response.text();
    })
    .then(data => data) // No need to log here; you'll handle the data elsewhere
    .catch(error => {
    console.error('Error:', error);
    return { error: error.message }; // Return an error object instead of nothing
    });
}
  